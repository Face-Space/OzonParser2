import logging
import threading
import asyncio
from typing import TYPE_CHECKING, Optional, Dict

from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

if TYPE_CHECKING:
    from ..core.app_manager import AppManager
    #  —É—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å—Ç–∏–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ (—Ç–æ –µ—Å—Ç—å, –∫–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ–¥
    #  —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ —Ç–∏–ø–∞ mypy). –í–æ –≤—Ä–µ–º—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ, –∏ —Ç–µ–ª–æ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è

    # –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏
    # if TYPE_CHECKING: –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –∏ –∏–º–ø–æ—Ä—Ç –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å.

    #  –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ if TYPE_CHECKING: –≤–∏–¥–µ–Ω –∏ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤, –∞ –Ω–µ —Å–∞–º–∏–º Python
    #  –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤ –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç—ã —Ç–∞–∫–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (mypy –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö),
    #  –∞ –Ω–µ –≤ runtime

logger = logging.getLogger()

class ParsingStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_count = State()
    settings_menu = State()
    waiting_for_default_count = State()

FIELD_NAMES = {
    'article': '–ê—Ä—Ç–∏–∫—É–ª',
    'name': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    'seller_name': '–ü—Ä–æ–¥–∞–≤–µ—Ü',
    'company_name': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏',
    'inn': '–ò–ù–ù',
    'card_price': '–¶–µ–Ω–∞ –∫–∞—Ä—Ç—ã',
    'price': '–¶–µ–Ω–∞',
    'original_price': '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞',
    'product_url': '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä',
    'image_url': '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    'orders_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
    'reviews_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤',
    'average_rating': '–†–µ–π—Ç–∏–Ω–≥',
    'working_time': '–†–∞–±–æ—Ç–∞–µ—Ç —Å'
}

class TelegramBotManager:

    def __init__(self, bot_token: str, user_ids: list, app_manager: 'AppManager'):
        self.bot_token = bot_token
        self.user_ids = user_ids  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö User ID
        self.app_manager = app_manager
        self.bot = Bot(token=bot_token)
        self.dp = Dispatcher()
        self.is_running = False
        self.bot_thread: Optional[threading.Thread] = None
        self.db = Database()
        self.user_data: Dict[str, dict] = {}
        self.parsing_user_id = None

        self._register_handlers()


    def start(self) -> bool:
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.bot_thread = threading.Thread(target=self._run_bot, daemon=True)
            self.bot_thread.start()

            # –î–∞—ë–º –±–æ—Ç—É –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            import time
            time.sleep(2)

            if self.is_running:
                # –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                notification_thread = threading.Thread(
                    target=self._send_startup_notification,
                    daemon=True
                )
                notification_thread.start()
                return True
            else:
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            return False


    def _send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –≠—Ç–æ –∏–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å asyncio
            temp_bot = Bot(token=self.bot_token)

            async def send_and_close():
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    for user_id in self.user_ids:
                        await temp_bot.send_message(chat_id=user_id,
                                                    text="ü§ñ Ozon Parser –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                finally:
                    await temp_bot.session.close()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
            asyncio.run(send_and_close())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")


    def _run_bot(self):
        try:
            self._is_running = True
            asyncio.run(self.dp.start_polling(self.bot))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞: {e}")
            self.is_running = False


    def _register_handlers(self):
        self.dp.message.register(self._cmd_start, Command('start'))
        self.dp.message.register(self._cmd_status, Command('status'))
        self.dp.message.register(self._cmd_settings, Command('settings'))
        self.dp.message.register(self._cmd_help, Command('help'))

        self.dp.callback_query.register(self._handle_callback)
        self.dp.message.register(self._handle_url_input, StateFilter(ParsingStates.waiting_for_url))
        self.dp.message.register(self._handle_count_input, StateFilter(ParsingStates.waiting_for_count))
        self.dp.message.register(self._handle_default_count_input, StateFilter(ParsingStates.waiting_for_default_count))
        self.dp.message.register(self._handle_message)


    async def _cmd_start(self, message: Message, state: FSMContext = None):
        if not self._is_authorized_user(message):
            return

        if state:
            await state.clear()

        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"), KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
            [KeyboardButton(text="üîß –†–µ—Å—É—Ä—Å—ã"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ], resize_keyboard=True)

        welcome_text = (
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ozon Parser!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )

        await message.reply(welcome_text, reply_markup=keyboard, parse_mode="HTML")


    async def _cmd_status(self, message: Message):
        await self._show_status(message)


    async def _show_status(self, message_or_query):
        if not self._is_authorized_user(message_or_query):
            return

        status = self.app_manager.get_status()

        status_text = f"üìä <b>–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞</b>\n\n"
        status_text += f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if status['is_running'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        status_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {status.get('active_users_count', 0)}\n"
        status_text += f"ü§ñ Telegram –±–æ—Ç: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n"
        status_text += f"üì¶ –ú–∞–∫—Å. —Ç–æ–≤–∞—Ä–æ–≤: {status['settings']['max_products']}\n"
        status_text += f"‚öôÔ∏è –ú–∞–∫—Å. –≤–æ—Ä–∫–µ—Ä–æ–≤: {status['settings']['max_workers']}\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∫–∞—Ö
        if status.get('total_active_users', 0) > 0:
            status_text += f"\nüîß <b>–†–µ—Å—É—Ä—Å—ã:</b>\n"
            status_text += f"‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ—Ä–∫–µ—Ä–æ–≤: {status.get('total_allocated_workers', 0)}/10\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(message_or_query.from_user.id)
        user_results = self.app_manager.get_user_results(user_id)

        if user_results:
            status_text += f"\nüìà <b>–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
            status_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {user_results.get('successful_products', 0)}/{user_results.get('total_products', 0)}"
        elif status['last_results']:
            # Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            results = status['last_result']
            status_text += f"\nüìà <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            status_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {results.get('successful_products')}/{results.get('total_products', 0)}"

        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ], resize_keyboard=True)

        await message_or_query.reply(status_text, reply_markup=keyboard, parse_mode="HTML")

    async def _show_resources_status(self, message_or_query):
        if not self._is_authorized_user(message_or_query):
            return

        try:
            from ..utils.resource_manager import resource_manager
            status = resource_manager.get_status()

            status_text = "üîß <b>–°—Ç–∞—Ç—É—Å —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n\n"

            if status['total_active_users'] == 0:
                status_text += "üò¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                status_text += f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: {resource_manager.MAX_TOTAL_WORKERS}\n"
            else:
                status_text += f"üë•–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {status['total_active_users']}\n"
                status_text += f"‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ—Ä–∫–µ—Ä–æ–≤: {status['total_allocated_workers']}/{resource_manager.MAX_TOTAL_WORKERS}\n\n"

                for user_id, session_info in status['sessions'].items():
                    user_display = f"User_{user_id[-4:]}" if len(user_id) > 4 else user_id
                    status_text += f"   üë§<b>{user_display}</b>\n"
                    status_text += f"   üìã –≠—Ç–∞–ø: {session_info['stage']}\n"
                    status_text += f"   ‚öôÔ∏è –í–æ—Ä–∫–µ—Ä–æ–≤: {session_info['workers']}\n"
                    status_text += f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {session_info['progress']}\n"
                    status_text += f"   ‚è± –í—Ä–µ–º—è: {session_info['duration']}\n\n"

            status_text += f"\nüìã <b>–õ–∏–º–∏—Ç—ã:</b>\n"
            status_text += f"‚Ä¢ –ú–∞–∫—Å –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤—Å–µ–≥–æ: {resource_manager.MAX_TOTAL_WORKERS}\n"
            status_text += f"‚Ä¢ –ú–∞–∫—Å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {resource_manager.MAX_WORKERS_PER_USER}\n"
            status_text += f"‚Ä¢ –ú–∏–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {resource_manager.MIN_WORKERS_PER_USER}\n"

        except Exception as e:
            status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}"

        await message_or_query.reply(status_text, parse_mode="HTML")


    async def _cmd_settings(self, message: Message, state: FSMContext):
        await self._show_settings(message, state)


    async def _show_settings(self, message_or_query, state: FSMContext):
        if not self._is_authorized_user(message_or_query):
            return

        user_id = str(message_or_query.from_user.id)
        settings = self.db.get_user_settings(user_id)


    def _is_authorized_user(self, message_or_query) -> bool:
        user_id = str(message_or_query.from_user.id)
        if user_id not in self.user_ids:
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return False
        return True








